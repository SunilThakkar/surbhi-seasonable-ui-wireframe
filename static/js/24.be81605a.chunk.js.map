{"version":3,"sources":["views/manage-items/AddUpdateItem.js"],"names":["animatedComponents","makeAnimated","AddUpdateItem","props","handleSelectedCategories","selectedCategories","setState","state","this","isEditing","buttonText","isItemSaving","itemData","id","undefined","name","description","container","spacing","gridSpacing","item","xs","Body","Title","className","initialValues","itemName","itemDescription","enableReinitialize","validate","values","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","isValid","dirty","handleReset","autoComplete","md","Group","Label","variant","align","Control","required","type","placeholder","onBlur","onChange","value","as","rows","isClearable","cacheOptions","defaultOptions","components","isMulti","selectedOption","loadOptions","inputValue","callback","setTimeout","newValues","map","currentValue","label","onClick","e","color","disabled","disableElevation","animation","size","role","Component"],"mappings":"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","file":"static/js/24.be81605a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { gridSpacing } from \"../../store/constant\";\r\nimport { Button, Divider, Grid, Typography } from \"@mui/material\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport { Col, Form, Modal, Row, Spinner } from \"react-bootstrap\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport makeAnimated from \"react-select/animated/dist/react-select.esm\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nclass AddUpdateItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedCategories: [],\r\n    };\r\n  }\r\n\r\n  handleSelectedCategories = (selectedCategories: Array) => {\r\n    this.setState({ selectedCategories });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isEditing = false,\r\n      buttonText = \"Save\",\r\n      isItemSaving = false,\r\n      itemData = { id: undefined, name: undefined, description: undefined },\r\n      selectedCategories = [],\r\n    } = this.state;\r\n    return (\r\n      <Grid container spacing={gridSpacing}>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>\r\n                <div className={\"d-flex\"}>\r\n                  <h5 className=\"table-title\">Add New Item</h5>\r\n                </div>\r\n              </Card.Title>\r\n              <Divider />\r\n              <Formik\r\n                initialValues={{\r\n                  id: isEditing ? itemData.id : undefined,\r\n                  itemName: isEditing ? itemData.name : \"\",\r\n                  itemDescription: isEditing ? itemData.description : \"\",\r\n                }}\r\n                enableReinitialize={true}\r\n                validate={(values) => {}}\r\n                onSubmit={(values) => {}}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isValid,\r\n                  dirty,\r\n                  handleReset,\r\n                }) => (\r\n                  <>\r\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                      {/*<BlockLoader blocking={isGetLoading}>*/}\r\n                      <Row className={\"mt-2\"}>\r\n                        <Col md={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>\r\n                              <Typography variant=\"h5\" align=\"center\">\r\n                                Item Name\r\n                              </Typography>\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              required\r\n                              type=\"text\"\r\n                              name=\"itemName\"\r\n                              placeholder=\"Enter Item Name\"\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              value={values.itemName}\r\n                              className={\r\n                                touched.itemName && errors.itemName\r\n                                  ? \"error\"\r\n                                  : null\r\n                              }\r\n                            />\r\n                            {touched.itemName && errors.itemName ? (\r\n                              <div className=\"text-danger\">\r\n                                {errors.itemName}\r\n                              </div>\r\n                            ) : null}\r\n                          </Form.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row className={\"mt-2\"}>\r\n                        <Col md={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>\r\n                              <Typography variant=\"h5\" align=\"center\">\r\n                                Item Description\r\n                              </Typography>\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              required\r\n                              as=\"textarea\"\r\n                              rows={3}\r\n                              name=\"itemDescription\"\r\n                              placeholder=\"Enter Item Description\"\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              value={values.itemDescription}\r\n                              className={\r\n                                touched.itemDescription &&\r\n                                errors.itemDescription\r\n                                  ? \"error\"\r\n                                  : null\r\n                              }\r\n                            />\r\n                            {touched.itemDescription &&\r\n                            errors.itemDescription ? (\r\n                              <div className=\"text-danger\">\r\n                                {errors.itemDescription}\r\n                              </div>\r\n                            ) : null}\r\n                          </Form.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row className={\"mt-2\"}>\r\n                        <Col md={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>\r\n                              <Typography variant=\"h5\" align=\"center\">\r\n                                Item Categories\r\n                              </Typography>\r\n                            </Form.Label>\r\n                            <AsyncSelect\r\n                              value={selectedCategories}\r\n                              isClearable={false}\r\n                              required\r\n                              cacheOptions\r\n                              defaultOptions\r\n                              components={animatedComponents}\r\n                              isMulti={true}\r\n                              placeholder={\"Select Item Categories\"}\r\n                              onChange={(selectedOption) => {\r\n                                this.handleSelectedCategories(\r\n                                  selectedOption || []\r\n                                );\r\n                              }}\r\n                              loadOptions={(inputValue, callback) =>\r\n                                setTimeout(() => {\r\n                                  const newValues = [\r\n                                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\r\n                                  ].map((currentValue) => {\r\n                                    return {\r\n                                      label: `SomeValue ${currentValue}`,\r\n                                      value: `SomeValue ${currentValue}`,\r\n                                    };\r\n                                  });\r\n                                  callback(newValues);\r\n                                }, 400)\r\n                              }\r\n                            />\r\n                          </Form.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      {/*</BlockLoader>*/}\r\n                      <Row className={\"mt-2\"}>\r\n                        <Col md={4} />\r\n                        <Col>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handleReset(e)}\r\n                          >\r\n                            Clear\r\n                          </Button>\r\n                          <Button\r\n                            className={\"ms-3\"}\r\n                            type={\"submit\"}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            disabled={!(isValid && dirty)}\r\n                            disableElevation\r\n                          >\r\n                            {buttonText}\r\n                            {isItemSaving && (\r\n                              <Spinner\r\n                                as=\"span\"\r\n                                animation=\"border\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                                className={\"ms-2\"}\r\n                              />\r\n                            )}\r\n                          </Button>\r\n                        </Col>\r\n                        <Col md={4} />\r\n                      </Row>\r\n                    </Form>\r\n                  </>\r\n                )}\r\n              </Formik>\r\n            </Card.Body>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddUpdateItem;\r\n"],"sourceRoot":""}